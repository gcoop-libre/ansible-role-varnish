# {{ ansible_managed }}
vcl 4.0;
# Based on: https://github.com/mattiasgeniar/varnish-4.0-configuration-templates/blob/master/default.vcl

import std;
import directors;

{% if varnish_backends | length > 0 %}
{% for backend in varnish_backends %}
backend {{ backend.name }} {
  .host = "{{ backend.host }}";
  .port = "{{ backend.port }}";
  .max_connections = {{ backend.max_connections | default(varnish_backends_defaults.max_connections) }};
  .first_byte_timeout = {{ backend.first_byte_timeout | default(varnish_backends_defaults.first_byte_timeout) }}s;
  .connect_timeout = {{ backend.connect_timeout | default(varnish_backends_defaults.connect_timeout) }}s;
  .between_bytes_timeout = {{ backend.between_bytes_timeout | default(varnish_backends_defaults.between_bytes_timeout) }}s;
  .probe = {
{% if backend.probe_url is defined and backend.probe_url | length > 0 %}
    .url = "{{ backend.probe_url }}";
{% elif backend.probe_request is defined and backend.probe_request | length > 0 %}
    .request = "{{ backend.probe_request }}";
{% else %}
    .request =
      "HEAD / HTTP/1.1"
      "Host: {{ backend.host }}"
      "Connection: close"
      "User-Agent: Varnish Health Probe";
{% endif %}
    .interval = {{ backend.probe_interval | default(varnish_backends_defaults.probe_interval) }}s;
    .timeout = {{ backend.probe_timeout | default(varnish_backends_defaults.probe_timeout) }}s;
    .window = {{ backend.probe_window | default(varnish_backends_defaults.probe_window) }};
    .threshold = {{ backend.probe_threshold | default(varnish_backends_defaults.probe_threshold) }};
  }
}
{% endfor %}
{% endif %}

acl purge {
{% if varnish_acl_purge_hosts | length > 0 %}
{% for host in varnish_acl_purge_hosts %}
  "{{ host }}";
{% endfor %}
{% endif %}
}

acl editors {
{% if varnish_acl_editors_hosts | length > 0 %}
{% for host in varnish_acl_editors_hosts %}
  "{{ host }}";
{% endfor %}
{% endif %}
}

sub vcl_init {
{% if varnish_directors | length > 0 %}
{% for director in varnish_directors %}
  new {{ director.name }} = directors.{{ director.type | default("round_robin") }}();
{% if director.backends is defined and director.backends | length > 0 %}
{% for backend in director.backends %}
  {{ director.name }}.add_backend({{ backend.name }}{% if director.type | default("round_robin") in ["hash", "random"] and backend.weight is defined %}, {{ backend.weight }}{% endif %});
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
}

sub vcl_recv {
  # Called at the beginning of a request, after the complete request has been received and parsed.
  # Its purpose is to decide whether or not to serve the request, how to do it, and, if applicable,
  # which backend to use.
  # also used to modify the request

{% if varnish_directors | length > 0 %}
{% for director in varnish_directors %}
{% if director.name == 'default' %}
{% set default_director_exists = True %}
{% endif %}
{% if director.director_for is defined and director.director_for | length > 0 %}
  {% if conditional_director_exists | default(False) and not loop.first %}else {% endif %}if (
{% for director_for in director.director_for %}
    req.http.host ~ "{{ director_for }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
  ) {
    set req.backend_hint = {{ director.name }}.backend();
  }
{% set conditional_director_exists = True %}
{% endif %}
{% if loop.last %}
{% if conditional_director_exists | default(False) %}
  else {
    set req.backend_hint = {% if default_director_exists | default(False) %}default{% else %}{{ varnish_directors.0.name }}{% endif %}.backend();
  }
{% else %}
  set req.backend_hint = {% if default_director_exists | default(False) %}default{% else %}{{ varnish_directors.0.name }}{% endif %}.backend();
{% endif %}
{% endif %}
{% endfor %}
{% elif varnish_backends | length > 0 %}
{% for backend in varnish_backends %}
{% if backend.name == 'default' %}
{% set default_backend_exists = True %}
{% endif %}
{% if backend.backend_for is defined and backend.backend_for | length > 0 %}
  {% if conditional_backend_exists | default(False) and not loop.first %}else {% endif %}if (
{% for backend_for in backend.backend_for %}
    req.http.host ~ "{{ backend_for }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
  ) {
    set req.backend_hint = {{ backend.name }};
  }
{% set conditional_backend_exists = True %}
{% endif %}
{% if loop.last %}
{% if conditional_backend_exists | default(False) %}
  else {
    set req.backend_hint = {% if default_backend_exists | default(False) %}default{% else %}{{ varnish_backends.0.name }}{% endif %}.backend();
  }
{% else %}
  set req.backend_hint = {% if default_backend_exists | default(False) %}default{% else %}{{ varnish_backends.0.name }}{% endif %}.backend();
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

  # Remove the proxy header (see https://httpoxy.org/#mitigate-varnish)
  unset req.http.proxy;

  # Normalize the header, remove the port (in case you're testing this on various TCP ports)
  set req.http.Host = regsub(req.http.Host, ":[0-9]+", "");
  # Normalize the query arguments
  set req.url = std.querysort(req.url);

  # Allow purging
  if (req.method == "PURGE") {
    if (!client.ip ~ purge) {
      return (synth(405, "This IP is not allowed to send PURGE requests."));
    }
    return (purge);
  }

  # Only deal with "normal" types
  if (
    req.method != "GET" &&
    req.method != "HEAD" &&
    req.method != "PUT" &&
    req.method != "POST" &&
    req.method != "TRACE" &&
    req.method != "OPTIONS" &&
    req.method != "PATCH" &&
    req.method != "DELETE"
  ) {
    return (pipe);
  }

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
  if (req.http.Upgrade ~ "(?i)websocket") {
    return (pipe);
  }

  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
  if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
  }

  # Some generic URL manipulation, useful for all templates that follow
  # First remove the Google Analytics added parameters, useless for our backend
  if (req.url ~ "(\?|&)(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=") {
    set req.url = regsuball(req.url, "&(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "");
    set req.url = regsuball(req.url, "\?(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "?");
    set req.url = regsub(req.url, "\?&", "?");
    set req.url = regsub(req.url, "\?$", "");
  }
{% if varnish_vcl_recv_backend_useless_parameters | length > 0 %}
  # Remove added parameters, useless for our backend
  if (req.url ~ "(\?|&)({{ varnish_vcl_recv_backend_useless_parameters | join('|') }})=") {
    set req.url = regsuball(req.url, "&({{ varnish_vcl_recv_backend_useless_parameters | join('|') }})=([A-z0-9_\-\.%25]+)", "");
    set req.url = regsuball(req.url, "\?({{ varnish_vcl_recv_backend_useless_parameters | join('|') }})=([A-z0-9_\-\.%25]+)", "?");
    set req.url = regsub(req.url, "\?&", "?");
    set req.url = regsub(req.url, "\?$", "");
  }
{% endif %}
  # Strip hash, server doesn't need it.
  if (req.url ~ "\#") {
    set req.url = regsub(req.url, "\#.*$", "");
  }
  # Strip a trailing ? if it exists
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Some generic cookie manipulation, useful for all templates that follow
  # Remove the "has_js" cookie
  set req.http.Cookie = regsuball(req.http.Cookie, "has_js=[^;]+(; )?", "");
  # Remove any Google Analytics based cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__utm.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "_ga=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "_gat=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmctr=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmcmd.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmccn.=[^;]+(; )?", "");
  # Remove DoubleClick offensive cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__gads=[^;]+(; )?", "");
  # Remove the Quant Capital cookies (added by some plugin, all __qca)
  set req.http.Cookie = regsuball(req.http.Cookie, "__qc.=[^;]+(; )?", "");
  # Remove the AddThis cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__atuv.=[^;]+(; )?", "");
{% if varnish_vcl_recv_remove_cookies | length > 0 %}
{% for cookie in varnish_vcl_recv_remove_cookies %}
  set req.http.Cookie = regsuball(req.http.Cookie, "{{ cookie }}=[^;]+(; )?", "");
{% endfor %}
{% endif %}
  # Remove a ";" prefix in the cookie if present
  set req.http.Cookie = regsuball(req.http.Cookie, "^;\s*", "");
  # Are there cookies left with only spaces or that are empty?
  if (req.http.cookie ~ "^\s*$") {
    unset req.http.cookie;
  }

  if (req.http.Cache-Control ~ "(?i)no-cache" && client.ip ~ editors) {
  # http://varnish.projects.linpro.no/wiki/VCLExampleEnableForceRefresh
  # Ignore requests via proxy caches and badly behaved crawlers
  # like msnbot that send no-cache with every request.
    if (! (req.http.Via || req.http.User-Agent ~ "(?i)bot" || req.http.X-Purge)) {
      return(purge);
    }
  }

  # Large static files are delivered directly to the end-user without
  # waiting for Varnish to fully read the file first.
  # Varnish 4 fully supports Streaming, so set do_stream in vcl_backend_response()
  if (req.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    unset req.http.Cookie;
    return (hash);
  }

  # Remove all cookies for static files
  # A valid discussion could be held on this line: do you really need to cache static files that don't cause load? Only if you have memory left.
  # Sure, there's disk I/O, but chances are your OS will already have these files in their buffers (thus memory).
  # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/
  if (req.url ~ "^[^?]*\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\?.*)?$") {
    unset req.http.Cookie;
    return (hash);
  }

{% if varnish_vcl_recv_unset_all_cookies_exceptions | length > 0 %}
  if (
{% for exception in varnish_vcl_recv_unset_all_cookies_exceptions %}
{% if exception.host is defined %}
{% if exception.urls is defined %}
    (
      ! req.http.host ~ "{{ exception.host }}" ||
      (
{% for url in exception.urls %}
        ! req.url ~ "{{ url }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! req.http.host ~ "{{ exception.host }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% elif exception.url is defined %}
{% if exception.hosts is defined %}
    (
      ! req.url ~ "{{ exception.url }}" ||
      (
{% for host in exception.hosts %}
        ! req.http.host ~ "{{ host }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! req.url ~ "{{ exception.url }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    unset req.http.Cookie;
  }
{% endif %}
{% if varnish_vcl_recv_unset_all_cookies_conditions | length > 0 %}
  if (
{% for condition in varnish_vcl_recv_unset_all_cookies_conditions %}
{% if condition.host is defined %}
{% if condition.urls is defined %}
    (
      req.http.host ~ "{{ condition.host }}" &&
      (
{% for url in condition.urls %}
        req.url ~ "{{ url }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    req.http.host ~ "{{ condition.host }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% elif condition.url is defined %}
{% if condition.hosts is defined %}
    (
      req.url ~ "{{ condition.url }}" &&
      (
{% for host in condition.hosts %}
        req.http.host ~ "{{ host }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %}
{% else %}
    req.url ~ "{{ condition.url }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    unset req.http.Cookie;
  }
{% endif %}
{% if varnish_vcl_recv_unset_all_cookies %}
  unset req.http.Cookie;
{% endif %}

  # Send Surrogate-Capability headers to announce ESI support to backend
  set req.http.Surrogate-Capability = "key=ESI/1.0";

  if (req.http.Authorization) {
    # Not cacheable by default
    return (pass);
  }

{% if varnish_vcl_recv_pass_exceptions | length > 0 %}
  if (
{% for exception in varnish_vcl_recv_pass_exceptions %}
{% if exception.host is defined %}
{% if exception.urls is defined %}
    (
      ! req.http.host ~ "{{ exception.host }}" ||
      (
{% for url in exception.urls %}
        ! req.url ~ "{{ url }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! req.http.host ~ "{{ exception.host }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% elif exception.url is defined %}
{% if exception.hosts is defined %}
    (
      ! req.url ~ "{{ exception.url }}" ||
      (
{% for host in exception.hosts %}
        ! req.http.host ~ "{{ host }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %}
{% else %}
    ! req.url ~ "{{ exception.url }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    return (pass);
  }
{% endif %}
{% if varnish_vcl_recv_pass_conditions | length > 0 %}
  if (
{% for condition in varnish_vcl_recv_pass_conditions %}
{% if condition.host is defined %}
{% if condition.urls is defined %}
    (
      req.http.host ~ "{{ condition.host }}" &&
      (
{% for url in condition.urls %}
        req.url ~ "{{ url }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    req.http.host ~ "{{ condition.host }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% elif condition.url is defined %}
{% if condition.hosts is defined %}
    (
      req.url ~ "{{ condition.url }}" &&
      (
{% for host in condition.hosts %}
        req.http.host ~ "{{ host }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    req.url ~ "{{ condition.url }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    return (pass);
  }
{% endif %}
{% if varnish_vcl_recv_pass %}
  return (pass);
{% endif %}
  
{% if varnish_vcl_recv_pipe_exceptions | length > 0 %}
  if (
{% for exception in varnish_vcl_recv_pipe_exceptions %}
{% if exception.host is defined %}
{% if exception.urls is defined %}
    (
      ! req.http.host ~ "{{ exception.host }}" ||
      (
{% for url in exception.urls %}
        ! req.url ~ "{{ url }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! req.http.host ~ "{{ exception.host }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% elif exception.url is defined %}
{% if exception.hosts is defined %}
    (
      ! req.url ~ "{{ exception.url }}" ||
      (
{% for host in exception.hosts %}
        ! req.http.host ~ "{{ host }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! req.url ~ "{{ exception.url }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    return (pipe);
  }
{% endif %}
{% if varnish_vcl_recv_pipe_conditions | length > 0 %}
  if (
{% for condition in varnish_vcl_recv_pipe_conditions %}
{% if condition.host is defined %}
{% if condition.urls is defined %}
    (
      req.http.host ~ "{{ condition.host }}" &&
      (
{% for url in condition.urls %}
        req.url ~ "{{ url }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    req.http.host ~ "{{ condition.host }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% elif condition.url is defined %}
{% if condition.hosts is defined %}
    (
      req.url ~ "{{ condition.url }}" &&
      (
{% for host in condition.hosts %}
        req.http.host ~ "{{ host }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    req.url ~ "{{ condition.url }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    return (pipe);
  }
{% endif %}
{% if varnish_vcl_recv_pipe %}
  return (pipe);
{% endif %}

  return (hash);
}

sub vcl_pipe {
  # Called upon entering pipe mode.
  # In this mode, the request is passed on to the backend, and any further data from both the client
  # and backend is passed on unaltered until either end closes the connection. Basically, Varnish will
  # degrade into a simple TCP proxy, shuffling bytes back and forth. For a connection in pipe mode,
  # no other VCL subroutine will ever get called after vcl_pipe.

  # Note that only the first request to the backend will have
  # X-Forwarded-For set.  If you use X-Forwarded-For and want to
  # have it set for all requests, make sure to have:
  # set bereq.http.connection = "close";
  # here.  It is not set by default as it might break some broken web
  # applications, like IIS with NTLM authentication.

{% if varnish_vcl_pipe_connection_close %}
  set bereq.http.Connection = "Close";
{% endif %}

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
  if (req.http.upgrade) {
    set bereq.http.upgrade = req.http.upgrade;
  }

  return (pipe);
}

sub vcl_pass {
  # Called upon entering pass mode. In this mode, the request is passed on to the backend, and the
  # backend's response is passed on to the client, but is not entered into the cache. Subsequent
  # requests submitted over the same client connection are handled normally.

  # return (pass);
}

# The data on which the hashing will take place
sub vcl_hash {
  # Called after vcl_recv to create a hash value for the request. This is used as a key
  # to look up the object in Varnish.

  hash_data(req.url);

  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }

  # hash cookies for requests that have them
  if (req.http.Cookie) {
    hash_data(req.http.Cookie);
  }
}

sub vcl_hit {
  # Called when a cache lookup is successful.

  if (obj.ttl >= 0s) {
    # A pure unadultered hit, deliver it
    return (deliver);
  }

  # https://www.varnish-cache.org/docs/trunk/users-guide/vcl-grace.html
  # When several clients are requesting the same page Varnish will send one request to the backend and place the others on hold while fetching one copy from the backend. In some products this is called request coalescing and Varnish does this automatically.
  # If you are serving thousands of hits per second the queue of waiting requests can get huge. There are two potential problems - one is a thundering herd problem - suddenly releasing a thousand threads to serve content might send the load sky high. Secondly - nobody likes to wait. To deal with this we can instruct Varnish to keep the objects in cache beyond their TTL and to serve the waiting requests somewhat stale content.

# if (!std.healthy(req.backend_hint) && (obj.ttl + obj.grace > 0s)) {
#   return (deliver);
# } else {
#   return (fetch);
# }

  # We have no fresh fish. Lets look at the stale ones.
  if (std.healthy(req.backend_hint)) {
    # Backend is healthy. Limit age to 10s.
    if (obj.ttl + 10s > 0s) {
      #set req.http.grace = "normal(limited)";
      return (deliver);
    } else {
      # No candidate for grace. Fetch a fresh object.
      return(fetch);
    }
  } else {
    # backend is sick - use full grace
      if (obj.ttl + obj.grace > 0s) {
      #set req.http.grace = "full";
      return (deliver);
    } else {
      # no graced object.
      return (fetch);
    }
  }

  # fetch & deliver once we get the result
  return (fetch); # Dead code, keep as a safeguard
}

sub vcl_miss {
  # Called after a cache lookup if the requested document was not found in the cache. Its purpose
  # is to decide whether or not to attempt to retrieve the document from the backend, and which
  # backend to use.

  return (fetch);
}

# Handle the HTTP request coming from our backend
sub vcl_backend_response {
  # Called after the response headers has been successfully retrieved from the backend.

  # Pause ESI request and remove Surrogate-Control header
  if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
    unset beresp.http.Surrogate-Control;
    set beresp.do_esi = true;
  }

  # Enable cache for all static files
  # The same argument as the static caches from above: monitor your cache size, if you get data nuked out of it, consider giving up the static file cache.
  # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/
  if (bereq.url ~ "^[^?]*\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
  }

  # Large static files are delivered directly to the end-user without
  # waiting for Varnish to fully read the file first.
  # Varnish 4 fully supports Streaming, so use streaming here to avoid locking.
  if (bereq.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
    set beresp.do_stream = true;  # Check memory usage it'll grow in fetch_chunksize blocks (128k by default) if the backend doesn't send a Content-Length header, so only enable it for big objects
  }

{% if varnish_vcl_backend_response_unset_all_cookies_exceptions | length > 0 %}
  if (
{% for exception in varnish_vcl_backend_response_unset_all_cookies_exceptions %}
{% if exception.host is defined %}
{% if exception.urls is defined %}
    (
      ! bereq.http.host ~ "{{ exception.host }}" ||
      (
{% for url in exception.urls %}
        ! bereq.url ~ "{{ url }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! bereq.http.host ~ "{{ exception.host }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% elif exception.url is defined %}
{% if exception.hosts is defined %}
    (
      ! bereq.url ~ "{{ exception.url }}" ||
      (
{% for host in exception.hosts %}
        ! bereq.http.host ~ "{{ host }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! bereq.url ~ "{{ exception.url }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    unset beresp.http.set-cookie;
  }
{% endif %}
{% if varnish_vcl_backend_response_unset_all_cookies_conditions | length > 0 %}
  if (
{% for condition in varnish_vcl_backend_response_unset_all_cookies_conditions %}
{% if condition.host is defined %}
{% if condition.urls is defined %}
    (
      bereq.http.host ~ "{{ condition.host }}" &&
      (
{% for url in condition.urls %}
        bereq.url ~ "{{ url }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    bereq.http.host ~ "{{ condition.host }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% elif condition.url is defined %}
{% if condition.hosts is defined %}
    (
      bereq.url ~ "{{ condition.url }}" &&
      (
{% for host in condition.hosts %}
        bereq.http.host ~ "{{ host }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    bereq.url ~ "{{ condition.url }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    unset beresp.http.set-cookie;
  }
{% endif %}
{% if varnish_vcl_backend_response_unset_all_cookies %}
  unset beresp.http.set-cookie;
{% endif %}

  # Sometimes, a 301 or 302 redirect formed via Apache's mod_rewrite can mess with the HTTP port that is being passed along.
  # This often happens with simple rewrite rules in a scenario where Varnish runs on :80 and Apache on :8080 on the same box.
  # A redirect can then often redirect the end-user to a URL on :8080, where it should be :80.
  # This may need finetuning on your setup.
  #
  # To prevent accidental replace, we only filter the 301/302 redirects for now.
  if (beresp.status == 301 || beresp.status == 302) {
    set beresp.http.Location = regsub(beresp.http.Location, ":[0-9]+", "");
  }

{% if varnish_vcl_backend_response_beresp_ttl | int > 0 %}
{% if varnish_vcl_backend_response_force_beresp_ttl_exceptions | length > 0 %}
  if (
{% for exception in varnish_vcl_backend_response_force_beresp_ttl_exceptions %}
{% if exception.host is defined %}
{% if exception.urls is defined %}
    (
      ! bereq.http.host ~ "{{ exception.host }}" ||
      (
{% for url in exception.urls %}
        ! bereq.url ~ "{{ url }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! bereq.http.host ~ "{{ exception.host }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% elif exception.url is defined %}
{% if exception.hosts is defined %}
    (
      ! bereq.url ~ "{{ exception.url }}" ||
      (
{% for host in exception.hosts %}
        ! bereq.http.host ~ "{{ host }}"{% if not loop.last %} &&{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} &&{% endif %} 
{% else %}
    ! bereq.url ~ "{{ exception.url }}"{% if not loop.last %} &&{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    set beresp.ttl = {{ varnish_vcl_backend_response_beresp_ttl }}s;
  }
{% endif %}
{% if varnish_vcl_backend_response_force_beresp_ttl_conditions | length > 0 %}
  if (
{% for condition in varnish_vcl_backend_response_force_beresp_ttl_conditions %}
{% if condition.host is defined %}
{% if condition.urls is defined %}
    (
      bereq.http.host ~ "{{ condition.host }}" &&
      (
{% for url in condition.urls %}
        bereq.url ~ "{{ url }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    bereq.http.host ~ "{{ condition.host }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% elif condition.url is defined %}
{% if condition.hosts is defined %}
    (
      bereq.url ~ "{{ condition.url }}" &&
      (
{% for host in condition.hosts %}
        bereq.http.host ~ "{{ host }}"{% if not loop.last %} ||{% endif %} 
{% endfor %}
      )
    ){% if not loop.last %} ||{% endif %} 
{% else %}
    bereq.url ~ "{{ condition.url }}"{% if not loop.last %} ||{% endif %} 
{% endif %}
{% endif %}
{% endfor %}
  ) {
    set beresp.ttl = {{ varnish_vcl_backend_response_beresp_ttl }}s;
  }
{% endif %}
{% if varnish_vcl_backend_response_force_beresp_ttl %}
  set beresp.ttl = {{ varnish_vcl_backend_response_beresp_ttl }}s;
{% endif %}
{% endif %}

  # Set 2min cache if unset for static files
  if (beresp.ttl <= 0s || beresp.http.Set-Cookie || beresp.http.Vary == "*") {
    set beresp.ttl = 120s; # Important, you shouldn't rely on this, SET YOUR HEADERS in the backend
    set beresp.uncacheable = true;
    return (deliver);
  }

  # Don't cache 50x responses
  if (beresp.status == 500 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504) {
    return (abandon);
  }

  # Allow stale content, in case the backend goes down.
  # make Varnish keep all objects for 6 hours beyond their TTL
  set beresp.grace = {{ varnish_vcl_backend_response_beresp_grace }}h;

  return (deliver);
}

sub vcl_backend_error {
    set beresp.http.Content-Type = "text/html; charset=utf-8";
    set beresp.http.Retry-After = "5";

    synthetic({{ varnish_vcl_backend_error_response }});

    return (deliver);
}

# The routine when we deliver the HTTP request to the user
# Last chance to modify headers that are sent to the client
sub vcl_deliver {
  # Called before a cached object is delivered to the client.

  if (obj.hits > 0) { # Add debug header to see if it's a HIT/MISS and the number of hits, disable when not needed
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }
  # Please note that obj.hits behaviour changed in 4.0, now it counts per objecthead, not per object
  # and obj.hits may not be reset in some cases where bans are in use. See bug 1492 for details.
  # So take hits with a grain of salt
  set resp.http.X-Cache-Hits = obj.hits;

  # Remove some headers: PHP version
  unset resp.http.X-Powered-By;
  # Remove some headers: Apache version & OS
  unset resp.http.Server;
  unset resp.http.X-Drupal-Cache;
  unset resp.http.X-Varnish;
  unset resp.http.Via;
  unset resp.http.Link;
  unset resp.http.X-Generator;
{% if varnish_vcl_deliver_remove_headers | length > 0 %}
{% for header in varnish_vcl_deliver_remove_headers %}
  unset resp.http.{{ header }};
{% endfor %}
{% endif %}

  return (deliver);
}

sub vcl_purge {
  # Only handle actual PURGE HTTP methods, everything else is discarded
  if (req.method != "PURGE") {
    # restart request
    set req.http.X-Purge = "Yes";
    return(restart);
  }
}

sub vcl_synth {
  if (resp.status == 720) {
    # We use this special error status 720 to force redirects with 301 (permanent) redirects
    # To use this, call the following from anywhere in vcl_recv: return (synth(720, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 301;
    return (deliver);
  } elseif (resp.status == 721) {
    # And we use error status 721 to force redirects with a 302 (temporary) redirect
    # To use this, call the following from anywhere in vcl_recv: return (synth(720, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 302;
    return (deliver);
  }

  return (deliver);
}


sub vcl_fini {
  # Called when VCL is discarded only after all requests have exited the VCL.
  # Typically used to clean up VMODs.

  return (ok);
}
